#!/bin/bash

# March 2020
#Currently Loaded Modulefiles:
#  1) modules/3.2.11.4                                  9) ugni/6.0.14.0-7.0.1.1_7.27__ge78e5b0.ari         17) rca/2.2.20-7.0.1.1_4.33__g8e3fb5b.ari
#  2) altd/2.0                                         10) pmi/5.0.14                                       18) atp/2.1.3
#  3) darshan/3.1.7                                    11) dmapp/7.1.1-7.0.1.1_4.36__g38cf134.ari           19) PrgEnv-intel/6.0.5
#  4) intel/19.0.3.199                                 12) gni-headers/5.0.12.0-7.0.1.1_6.24__g3b1768f.ari  20) craype-haswell
#  5) craype-network-aries                             13) xpmem/2.2.20-7.0.1.1_4.5__g0475745.ari           21) cray-mpich/7.7.10
#  6) craype/2.6.2                                     14) job/2.2.4-7.0.1.1_3.29__g36b56f4.ari             22) craype-hugepages2M
#  7) cray-libsci/19.06.1                              15) dvs/2.12_2.2.151-7.0.1.1_5.29__g7eb5e703         23) python/3.7-anaconda-2019.10
#  8) udreg/2.3.2-7.0.1.1_3.24__g8175d3d.ari           16) alps/6.6.57-7.0.1.1_5.1__g1b735148.ari           24) Base-opts/2.4.139-7.0.1.1_4.73__gbb799dd.ari


export XTPE_LINK_TYPE=dynamic
export CRAYPE_LINK_TYPE=dynamic


#module switch PrgEnv-intel PrgEnv-gnu
#module switch PrgEnv-intel PrgEnv-cray
#1. Load dependancies (software that opal needs):
module load cmake 
module remove darshan
#module load cray-hdf5-parallel
module load cray-hdf5-parallel
#module load h5hut-parallel #Using H5hut build from nersc 
module load gsl   
module load boost  
#module load switch gcc/8.2.0 gcc/7.3.0 #/6.1.0 #This version needed for specific c++11 support?

export SOFTWARE="/global/cfs/cdirs/m669/nneveu/software/opal/"
export H5HUT_HOME=$SOFTWARE/H5hut
export H5HUT_PREFIX=$H5HUT_HOME
export H5HUT_DIR=$H5HUT_HOME
export H5HUT_INCLUDE_DIR=$H5HUT_HOME/include
export H5HUT_LIBRARY_DIR=$H5HUT_HOME/lib
#
#export BOOST_HOME=$SOFTWARE/boost-1.68
#export BOOST_DIR=$BOOST_HOME
#export BOOST_PREFIX=$BOOST_HOME
#export BOOST_INCLUDE_DIR=$BOOST_HOME/include
#export BOOST_LIBRARY_DIR=$BOOST_HOME/lib
#export BOOST_ROOT=$NHOME/boost_1_62_0_build/

#2. Point to the cray compiler wrappers 
#I_MPI_CC=cc;I_MPI_CXX=CC;I_MPI_FC=ftn;I_MPI_F90=ftn;I_MPI_F77=ftn
#export I_MPI_CC I_MPI_CXX I_MPI_F90 I_MPI_F77 I_MPI_FC
# GNU
#I_MPI_CC=gcc;I_MPI_CXX=g++;I_MPI_FC=gfortran; #I_MPI_F90=ftn;I_MPI_F77=ftn
#export I_MPI_CC I_MPI_CXX I_MPI_FC

#CC=cc;CXX=CC;F90=ftn;F77=ftn;FC=ftn
#CC=gcc;CXX=g++;FC=gfortran; #F90=ftn;F77=ftn
#export CC CXX F90 F77 FC

#Note: Steps #1 and #2 can be done by sourcing this file: 
# > source opal_build_cori

#Steps #3-6 should be done on the command line:

#3. Download a copy of the opal source code.
# Make a directory where you want OPAL src and exec to live
# > mkdir OPAL
# > cd OPAL

#This step can be skipped if you already have a copy of the opal src.
# > git clone https://gitlab.psi.ch/OPAL/src.git

#Checkout current stable branch of OPAL
# > git checkout OPAL-2.2

#3.b If you have a copy of src already, make sure it is up to date
# > cd /src
# > git pull #(while in the opal /src directory)

#4. Make a build directory in the OPAL directory
# > mkdir build #(while in /src from step #3.b)
# > cd build 

#Note: this directory will stay in place indefinitely.
# If you build opal again, you do not need to make a new build directory.
# Before a second build, I recommend taring the build dir (with a date in the name), 
# move the tarfile somewhere safe (storage), then delete the build dir contents.
# This way cmake will save files to an empty directory every time.

#5. Run cmake to configure build
# Note: change the path to where you want the opal executable to be installed
#cmake -DCMAKE_INSTALL_PREFIX=/global/cfs/cdirs/m669/nneveu/software/opal ../src 

#6. Run make and install to generate executables
# > make -j 4 
# > export DESTDIR="/global/cfs/cdirs/m669/nneveu/software/opal" && make -j4 install

####################################################################
###################################################################

